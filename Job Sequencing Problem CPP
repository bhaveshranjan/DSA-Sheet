Optimal Solution

bool compare(Job j1,Job j2)
{
    return j1.profit>j2.profit;
}
class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        int time_spent=0,profit=0;
        sort(arr,arr+n,compare);
        int max_days=arr[0].dead;
        for(int i=1;i<n;i++)
        {
            if(arr[i].dead>max_days)
                max_days=arr[i].dead;
        }
        vector<int> vect(max_days+1,-1);
        for(int i=0;i<n;i++)
        {
            int j=arr[i].dead;
            while(j>0 && vect[j]!=-1)
                j--;
            if(j>0){
                vect[j]=arr[i].id;
                profit+=arr[i].profit;
                time_spent++;
            }

        }
        return {time_spent,profit};
    } 
};
